export class NodeBase {
    constructor(question, control, form, parentPath) {
        this._control = control;
        this._questionModel = question;
        this._form = form;
        this._path = parentPath ? parentPath + '.' + question.key : question.key;
    }
    get question() {
        return this._questionModel;
    }
    get control() {
        return this._control;
    }
    get form() {
        return this._form;
    }
    get path() {
        return this._path;
    }
    removeAt(index) { }
    createChildNode() { }
    removeChildNode() { }
}
export class LeafNode extends NodeBase {
    constructor(question, control, parentControl, form, parentPath) {
        super(question, control, form, parentPath);
    }
}
export class GroupNode extends NodeBase {
    constructor(question, control, parentControl, form, parentPath) {
        super(question, control, form, parentPath);
        this._children = {};
    }
    get children() {
        return this._children;
    }
    setChild(key, node) {
        this.children[key] = node;
    }
}
export class ArrayNode extends NodeBase {
    constructor(question, control, parentControl, formFactory, form, parentPath) {
        super(question, control, form, parentPath);
        this.formFactory = formFactory;
        this.childNodeCreatedEvents = [];
        this._children = [];
        this.childNodeCreatedEvents = [];
    }
    get children() {
        return this._children;
    }
    createChildNode() {
        if (this.createChildFunc) {
            const g = this.createChildFunc(this.question, this, this.formFactory);
            this.fireChildNodeCreatedListener(g);
            return g;
        }
        return null;
    }
    removeAt(index) {
        if (this.removeChildFunc) {
            this.removeChildFunc(index, this);
        }
    }
    addChildNodeCreatedListener(func) {
        this.childNodeCreatedEvents.push(func);
    }
    fireChildNodeCreatedListener(node) {
        for (let i = 0; i < this.childNodeCreatedEvents.length; i++) {
            const func = this.childNodeCreatedEvents[i];
            func(node);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,